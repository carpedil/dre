//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use salvo::oapi::ToSchema;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, ToSchema)]
#[sea_orm(table_name = "api_message")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub srv_id: Option<i32>,
    pub api_name: Option<String>,
    pub typ: Option<String>,
    pub api_content: Option<String>,
    pub api_param: Option<String>,
    pub test_count: Option<i32>,
    pub is_inuse: Option<String>,
    pub mark_flag: Option<String>,
    pub priority: Option<i32>,
    pub comment: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::api_message_doc::Entity")]
    ApiMessageDoc,
    #[sea_orm(has_many = "super::api_message_test_record::Entity")]
    ApiMessageTestRecord,
    #[sea_orm(
        belongs_to = "super::api_server::Entity",
        from = "Column::SrvId",
        to = "super::api_server::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ApiServer,
}

impl Related<super::api_message_doc::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiMessageDoc.def()
    }
}

impl Related<super::api_message_test_record::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiMessageTestRecord.def()
    }
}

impl Related<super::api_server::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiServer.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
